package com.chan.tasks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;

import java.util.Properties;

public class TaskOne {

    public static void main(String args[]) {


        System.out.println("############################START############################");
        Properties prop = new Properties();
        initialize(prop);

        System.out.println("############################Sub-Task 1############################");

        String allBreedsJSON = retrieveAll();
        prettyPrintJSON(allBreedsJSON);

        System.out.println("############################Sub-Task 2############################");

        String breedToVerified = prop.getProperty("BREED_TO_VERIFY");

        if (verifyDogBreed(allBreedsJSON, breedToVerified)) {
            System.out.println(breedToVerified + " is within the list.");
        } else {
            System.out.println("Sorry!! " + breedToVerified + " is not in the list.");
        }

        System.out.println("############################Sub-Task 3############################");

        String breedToRetrieved = prop.getProperty("BREED_TO_RETRIEVE_SUB_BREEDS");

        prettyPrintJSON(retrieveSubBreed(breedToRetrieved));


        System.out.println("############################Sub-Task 4############################");

        String theBreedOfSubBreed = prop.getProperty("BREED_TO_RETRIEVE_SUB_BREED_IMG");

        String subBreedToRetrieve = prop.getProperty("SUB_BREED_TO_RETRIEVE_SUB_BREED_IMG");

        prettyPrintJSON(retrieveSubBreedImage(theBreedOfSubBreed, subBreedToRetrieve));


    }

    /**
     * This is to pretty print JSON
     *
     * @param rawJSON : JSON string generated by other functions
     */
    private static void prettyPrintJSON(String rawJSON) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        JsonParser jp = new JsonParser();
        JsonElement je = jp.parse(rawJSON);
        System.out.println(gson.toJson(je));
    }

    private static void initialize(Properties prop) {
        try {
            prop.load(TaskOne.class.getClassLoader().getResourceAsStream("testParams.properties"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Sub-task 1: Perform an API request to produce a list of all dog breeds
     *
     * @return : JSON list of all breeds.
     */
    private static String retrieveAll() {

        try {
            JsonNode body = Unirest.get(TaskConstants.BASE_API_URL + TaskConstants.RETRIEVE_ALL)
                    .asJson()
                    .getBody();

            return body.toString();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return TaskConstants.STANDARD_TEST_FAIL_JSON;

    }


    /**
     * Sub-task 2: Verify a whether a specific breed is available in the list.
     *
     * @param dogBreedsJSON   : Provide list of dog breeds in JSON format.
     * @param breedToVerified : Provide name of the breed needs to be verified
     * @return 'true' if the breed is available in the list.
     */
    private static boolean verifyDogBreed(String dogBreedsJSON, String breedToVerified) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        JsonElement breedsJsonElement = gson.fromJson(dogBreedsJSON, JsonElement.class);
        JsonElement breedJsonElement = breedsJsonElement.getAsJsonObject().getAsJsonObject("message").getAsJsonObject().get(breedToVerified);
        return breedJsonElement != null;
    }

    /**
     * Sub-task 3: Retrieve all sub-breeds of a specific breed.
     *
     * @param breedToRetrieved : Provide name of the breed to be used to retrieve sub-breeds.
     * @return : JSON list of sub-breeds
     */
    private static String retrieveSubBreed(String breedToRetrieved) {

        try {
            String retrieveWithParam = TaskConstants.RETRIEVE_SUB_BREEDS.replace("XXXX", breedToRetrieved);
            JsonNode body = Unirest.get(TaskConstants.BASE_API_URL + retrieveWithParam)
                    .asJson()
                    .getBody();

            return body.toString();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return TaskConstants.STANDARD_TEST_FAIL_JSON;
    }


    /**
     * Sub-task 4: Perform an API request to produce a random image link for a specific sub-breed
     *
     * @param theBreedOfSubBreed : The breed of the sub-breed belongs to.
     * @param subBreedToRetrieve : Sub-breed needs to be retrieved.
     * @return : JSON string of image link.
     */
    private static String retrieveSubBreedImage(String theBreedOfSubBreed, String subBreedToRetrieve) {

        try {
            String retrieveWithBreedParam = TaskConstants.RETRIEVE_RANDOM_SUB_BREED_IMG.replace("XXXX", theBreedOfSubBreed);
            String retrieveWithSubBreedParam = retrieveWithBreedParam.replace("YYYY", subBreedToRetrieve);
            JsonNode body = Unirest.get(TaskConstants.BASE_API_URL + retrieveWithSubBreedParam)
                    .asJson()
                    .getBody();

            return body.toString();

        } catch (Exception e) {
            e.printStackTrace();
        }
        return TaskConstants.STANDARD_TEST_FAIL_JSON;
    }

}
